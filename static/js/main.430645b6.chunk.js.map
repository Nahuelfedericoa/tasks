{"version":3,"sources":["logo.svg","components/TodoForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoForm","state","title","responsible","description","priority","handleInput","bind","handleSubmit","e","target","value","name","this","setState","console","log","preventDefault","props","onAddTodo","className","onSubmit","type","onChange","placeholder","Component","App","todos","handleAddTodo","todo","index","filter","i","map","key","onClick","removeTodo","href","length","class","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,kC,0iBCiF5BC,E,YA9EX,aAAc,IAAD,8BACT,+CACKC,MAAQ,CACTC,MAAO,GACPC,YAAY,GACZC,YAAY,GACZC,SAAS,OAEjB,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATP,E,yEAWDE,GAAE,MAEYA,EAAEC,OAAjBC,EAFG,EAEHA,MAAOC,EAFJ,EAEIA,KACdC,KAAKC,SAAL,eACKF,EAAOD,IAEZI,QAAQC,IAAIH,KAAKZ,S,mCAERQ,GACTA,EAAEQ,iBACFJ,KAAKK,MAAMC,UAAUN,KAAKZ,S,+BAG1B,OACI,yBAAKmB,UAAU,QACX,yBAAKA,UAAU,eACX,0CAIJ,0BAAMA,UAAU,YAAYC,SAAUR,KAAKL,cACvC,yBAAKY,UAAU,cACX,2BACIE,KAAK,OACLV,KAAK,QACLW,SAAUV,KAAKP,YACfc,UAAU,eACVI,YAAY,WAGpB,yBAAKJ,UAAU,cACX,2BACIE,KAAK,OACLV,KAAK,cACLQ,UAAU,eACVI,YAAY,cACZD,SAAUV,KAAKP,eAGvB,yBAAKc,UAAU,cACX,2BACIE,KAAK,OACLV,KAAK,cACLQ,UAAU,eACVI,YAAY,cACZD,SAAUV,KAAKP,eAGvB,yBAAKc,UAAU,cACX,4BACIR,KAAK,WACLQ,UAAU,eACVG,SAAUV,KAAKP,aAEf,uCACA,0CACA,0CAGR,4BAAQgB,KAAK,SAASF,UAAU,mBAAhC,c,GAvEGK,aCgFRC,E,YA1Eb,aAAc,IAAD,8BACX,+CACKzB,MAAQ,CACX0B,WAEF,EAAKC,cAAgB,EAAKA,cAAcrB,KAAnB,gBALV,E,2EAOCsB,GACZhB,KAAKC,SAAS,CACZa,MAAM,GAAD,mBAAMd,KAAKZ,MAAM0B,OAAjB,CAAwBE,Q,iCAGtBC,GACTjB,KAAKC,SAAS,CACZa,MAAOd,KAAKZ,MAAM0B,MAAMI,QAAO,SAACtB,EAAGuB,GACjC,OAAOA,IAAMF,S,+BAIV,IAAD,OACAH,EAAQd,KAAKZ,MAAM0B,MAAMM,KAAI,SAACJ,EAAOG,GACzC,OACE,yBAAKZ,UAAU,WAAWc,IAAKF,GAC7B,yBAAKZ,UAAU,aACb,yBAAKA,UAAU,eACb,4BAAKS,EAAK3B,OACV,0BAAMkB,UAAU,sCACbS,EAAKxB,WAGV,yBAAKe,UAAU,aACb,2BAAIS,EAAKzB,aACT,2BAAG,8BAAOyB,EAAK1B,eAEjB,yBAAKiB,UAAU,eACb,4BACEA,UAAU,iBACVe,QAAS,EAAKC,WAAW7B,KAAK,EAAMyB,IAFtC,gBAYZ,OACE,yBAAKZ,UAAU,OACb,yBAAKA,UAAU,8BACb,uBAAGiB,KAAK,GAAGjB,UAAU,cAArB,QAEE,0BAAMA,UAAU,qCACbP,KAAKZ,MAAM0B,MAAMW,UAIxB,yBAAKlB,UAAU,aACb,yBAAKA,UAAU,YACb,yBAAKmB,MAAM,wBACT,yBAAKC,IAAKC,IAAMrB,UAAU,WAAWsB,IAAI,SACzC,kBAAC,EAAD,CAAUvB,UAAWN,KAAKe,iBAE5B,yBAAKR,UAAU,YACb,yBAAKA,UAAU,OACbO,W,GAlEIF,aCKEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.430645b6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\n\nclass TodoForm extends Component {\n    constructor(){\n        super();\n        this.state = {\n            title: '',\n            responsible:'',\n            description:'',\n            priority:'low'\n        };\n    this.handleInput = this.handleInput.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    handleInput(e){\n        // console.log(e.target.value, e.target.name)\n        const {value, name} = e.target;\n        this.setState({\n            [name]: value\n        })\n        console.log(this.state)\n    }\n    handleSubmit(e){\n        e.preventDefault();\n        this.props.onAddTodo(this.state);\n    }\n    render(){\n        return(\n            <div className=\"card\">\n                <div className=\"card-header\">\n                    <h3>\n                        Add tasks\n                    </h3>\n                </div>\n                <form className=\"card-body\" onSubmit={this.handleSubmit}>\n                    <div className=\"form-group\">\n                        <input \n                            type=\"text\" \n                            name=\"title\" \n                            onChange={this.handleInput}\n                            className=\"form-control\" \n                            placeholder=\"Title\" \n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <input \n                            type=\"text\" \n                            name=\"responsible\" \n                            className=\"form-control\" \n                            placeholder=\"Responsible\"\n                            onChange={this.handleInput} \n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <input \n                            type=\"text\" \n                            name=\"description\" \n                            className=\"form-control\" \n                            placeholder=\"Description\"\n                            onChange={this.handleInput} \n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <select \n                            name=\"priority\"\n                            className=\"form-control\"\n                            onChange={this.handleInput}\n                        >\n                            <option>Low</option>\n                            <option>Medium</option>\n                            <option>High</option>\n                        </select>\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-warning\">\n                         Save\n                    </button>\n                </form>\n            </div>\n        )\n    }\n}\nexport default TodoForm;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { todos } from './todos.json';\nimport TodoForm from './components/TodoForm';\n\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      todos\n    };\n    this.handleAddTodo = this.handleAddTodo.bind(this);\n  }\n  handleAddTodo(todo){\n    this.setState({\n      todos: [...this.state.todos, todo]\n    })\n  }\n  removeTodo(index) {\n    this.setState({\n      todos: this.state.todos.filter((e, i) =>{\n        return i !== index\n      })\n    })\n  }\n  render(){\n    const todos = this.state.todos.map((todo , i) => {\n      return (\n        <div className=\"col-md-4\" key={i}>\n          <div className=\"card mt-4\">\n            <div className=\"card-header\">\n              <h3>{todo.title}</h3>\n              <span className=\"badge bagde-pill badge-danger ml-2\">\n                {todo.priority}\n              </span>\n            </div>\n            <div className=\"card-body\">\n              <p>{todo.description}</p>\n              <p><mark>{todo.responsible}</mark></p>\n            </div>\n            <div className=\"card-footer\">\n              <button\n                className=\"btn btn-danger\"\n                onClick={this.removeTodo.bind(this, i)}\n              >\n                Delete\n              </button>\n            </div>\n          </div>\n        </div>\n      )\n    })\n  \n  return (\n    <div className=\"App\">\n      <nav className=\"navbar navbar-dark bg-dark\">\n        <a href=\"\" className=\"text-white\">\n          Tasks\n          <span className=\"badge badge-pill badge-light ml-2\">\n            {this.state.todos.length}\n          </span>\n        </a>\n      </nav>\n      <div className=\"container\">\n        <div className=\"row mt-4\">\n          <div class=\"col-md-4 text-center\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <TodoForm onAddTodo={this.handleAddTodo}/>\n          </div>\n          <div className=\"col-md-8\">\n            <div className=\"row\">\n             {todos}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}